mean.diff.np <- function(data, indices) {#
	d <- data[indices, ]#
	mdiff <- mean(d$Achieve[1:34]) - mean(d$Achieve[35:150])#
	#vdiff <- var(d$Achieve[1:34]) - var(d$Achieve[35:150])#
	}
nonpar.boot <- boot(data = latino, statistic = mean.diff.np, R = 4999)
nonpar.boot
nonpar.boot <- boot(data = latino2, statistic = mean.diff.z.np, R = 4999)
nonpar.boot
plot(density(nonpar.boot$t))
mean(nonpar.boot$t)
head(latino)
t.test(Achieve~Mex, data=latino)
tapply(X = latino$z.achieve, INDEX = latino$Mex, FUN = var)
t.test(Achieve~Mex, data=latino, var.equal=TRUE)
.39/.20
latino <- read.table(file = file.choose(), header = TRUE, sep = ",", row.names = "ID")
library(boot)
tapply(latino$Achieve, latino$Mex, mean)
64.5147 - 58.5931
pv.3 <- function(data, indices) {#
	d <- data[indices,];#
	mean(x = d$Achieve[1:34]) - mean(x = d$Achieve[35:150]) + 3;#
	} #
set.seed(100)#
model.boot <- boot(data = latino, statistic = pv.3, R = 4999)#
mean(model.boot$t)#
sd(model.boot$t)
plot(density(model.boot$t))
length(model.boot$t[model.boot$t >= 5.9])#
(875 + 1)/(4999 + 1)
pv.3 <- function(data, indices) {#
	d <- data[indices,];#
	mean(x = d$Achieve[1:34]) - mean(x = d$Achieve[35:150]) + 5.92;#
	} #
set.seed(100)#
model.boot <- boot(data = latino, statistic = pv.3, R = 4999)
mean(model.boot$t)#
sd(model.boot$t)
latino <- read.table(file = file.choose(), header = TRUE, sep = ",", row.names = "ID")
library(boot)
mean.diff.alt <- function(data, indices) {#
	d <- data[indices, ]#
	mean(d$Achieve[d$Mex == 0]) - mean(d$Achieve[d$Mex == 1])#
	}
mean.diff.alt(latino)
altmodel.boot <- boot(latino, statistic = mean.diff.alt, R = 4999, strata = latino$Mex)
plot(density(altmodel.boot$t))
mean(altmodel.boot$t)
sd(altmodel.boot$t)
5.92 + 2*2.58
5.92 - 2*2.58
?quantile
quantile(altmodel.boot$t, probs=.025)
quantile(altmodel.boot$t, probs=.975)
altmodel.boot
boot.ci(altmodel.boot)
?boot.ci
pv.3 <- function(data, indices) {#
	d <- data[indices,];#
	mean(x = d$Achieve[1:34]) - mean(x = d$Achieve[35:150]);#
	}
model.boot <- boot(data = latino, statistic = pv.3, R = 4999)
plot(model.boot)
plot(density(model.boot$t)
)
sd(model.boot$t)
tapply(latino$Achieve, latino$Mex, var)
latino$z.achieve <- scale(latino$Achieve)
head(latino)
pv.3 <- function(data, indices) {#
	d <- data[indices,];#
	mean(x = d$z.achieve[1:34]) - mean(x = d$z.achieve[35:150]);#
	}
mean.diff.alt <- function(data, indices) {#
	d <- data[indices, ]#
	mean(d$z.achieve[d$Mex == 0]) - mean(d$z.achieve[d$Mex == 1])#
	}
altmodel.boot <- boot(latino, statistic = mean.diff.alt, R = 4999, strata = latino$Mex)
boot.ci(altmodel.boot)
t.test(latino$Achieve~latino$Mex, var.equal=TRUE)
library(MBESS)#
smd(Mean.1 = mean(latino$Achieve[latino$Mex == 0]), Mean.2 = mean(latino$Achieve[latino$Mex == 1]), s.1 = sd(latino$Achieve[latino$Mex == 0]), s.2 = sd(latino$Achieve[latino$Mex == 1]), n.1 = length(latino$Achieve[latino$Mex == 0]), n.2 = length(latino$Achieve[latino$Mex == 1]))
tapply(latino$z.achieve, latino$Mex, mean)
0.30047291 - -0.08806965
diet <- read.table(file = file.choose(), header = TRUE, sep = ",", row.names = "ID")
summary(diet)
file.choose()
model <- lm(WeightChange ~ Diet, data = diet)#
#
library(DAAG)#
library(animation)#
#
oopt = ani.options(interval = 0.07, nmax = 53)#
#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/TotalDeviations.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/ModelDeviations.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/ErrorDeviations.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/SST.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/SSMod.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/SSRes.R")
TotalDeviations()
ModelDeviations()
install.packages("rocr", dep=TRUE)
install.packages("ROCR", dep=TRUE)
library(ROCR)
?ROCR
data(ROCR.simple)
head(ROCR.simple)
pred <- prediction(ROCR.simple$predictions,ROCR.simple$labels)
str(pred)
pred$tp
pred[[1]]
pred[1]
table(pred)
perf <- performance( pred, "tpr", "fpr" )
perf
perf <- performance( pred, "tn" )
print(perf)
summary(perf)
summary(pred)
?performance
performance( pred, "tnr" )
performance( pred, "tnr" )[[2]]
performance( pred, "tnr" )$y.values
performance( pred, "tnr" )[1]
boxplot(WeightChange~Diet, data=diet)
mean(diet$WeightChange)
tapply(X=diet$WeightChange, INDEX=diet$Diet, FUN=mean)
tapply(X=diet$WeightChange, INDEX=diet$Diet, FUN=mean) - mean(diet$WeightChange)
head(diet)
-63.4 - -14.5
-55.6 - -14.5
tapply(X=diet$WeightChange, INDEX=diet$Diet, FUN=mean) - mean(diet$WeightChange)
(tapply(X=diet$WeightChange, INDEX=diet$Diet, FUN=mean) - mean(diet$WeightChange)) ^ 2
(tapply(X=diet$WeightChange, INDEX=diet$Diet, FUN=mean) - mean(diet$WeightChange)) ^ 2 * 60
2289.67431  + 35.98466 + 334.60888 + 555.05012
var(diet$WeightChange)*239
var(diet$WeightChange)*239 - 3215.318
3215/49959
3215.318/3
46744/236
1072/198
model <- lm(WeightChange ~ Diet, data=diet)
summary(diet)
summary(model)
anova(model)
str(model)
model$fitted.values
model$residuals
model$fitted.values^2
sum(model$fitted.values^2)
sum(model$residuals^2)
diet <- read.table(file = file.choose(), header = TRUE, sep = ",", row.names = "ID")
omnibus.model <- lm(diet$WeightChange ~ diet$Diet)
anova(omnibus.model)
omnibus.model
tapply(diet$WeightChange, diet$Diet, mean)
omnibus.model$fitted.values
summary(omnibus.model)
model <- lm(WeightChange ~ Diet, data = diet)
library(DAAG)#
library(animation)#
#
oopt = ani.options(interval = 0.07, nmax = 53)#
#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/TotalDeviations.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/ModelDeviations.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/ErrorDeviations.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/SST.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/SSMod.R")#
source("/Users/zief0002/Documents/EPSY-8261/Notes/Sums-of-Squares-Animation/SSRes.R")#
#
#
TotalDeviations()
par(new=FALSE)#
SST()
par(new=FALSE)#
ModelDeviations
par(new=FALSE)#
ModelDeviations()
par(new=FALSE)#
SSRes()
par(new=FALSE)#
SST()
par(new=FALSE)#
SSRes()
par(new=FALSE)#
SSMod()
anova(omnibus.model)
library(lattice)
densityplot(~WeightChange | Diet, data=diet)
tapply(diet$WeightChange, diet$Diet, var)
household <- read.table(file = file.choose(), header = TRUE, sep = ",", row.names = "ID")
library(WRS)
help(winvar)
winvar(household$Dollars)
library(sm)
density(household$Dollars)
sm.density(household$Dollars)
sm.density(household$Dollars, se=TRUE)
sm.density(household$Dollars, model="norm")
x <- rnorm(10, mean=0, sd=1)
x
sm.density(x)
sm.density(x, model="norm")
sm.density(x, se=TRUE)
rural.households <- household$Dollars[household$Area == "Rural"]urban.households <- household$Dollars[household$Area == "Urban"]
d.rural <- density(rural.households)
d.urban <- density(urban.households)
plot(d.rural)
plot(d.urban)
plot(d.rural)
plot(d.rural, xlim=c(0,3000))
lines(d.urban)
plot(d.rural, xlim=c(0,3000))
lines(d.urban, lty="dashed")
plot(d.rural, xlim=c(0,3000), main="")lines(d.urban, lty="dashed")
plot(d.rural, xlim=c(0,3000), main="", lty="solid", col="red")lines(d.urban, lty="dashed", col="blue")
plot(d.rural, xlim=c(0,3000), main="", lty="solid", col="red")
polygon(d.rural)
polygon(d.rural, col="red")
lines(d.urban, lty="dashed", col="blue")
polygon(d.urban, col="blue")
plot(d.rural, xlim=c(0,3000), main="", lty="solid", lwd=2)#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)
plot(d.rural, xlim=c(0,3000), main="", lty="dashed", lwd=2)#polygon(d.rural, col="red")lines(d.urban, lty="solid", lwd=2)
plot(d.rural, xlim=c(0,3000), main="", lty="solid", lwd=2)#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)
plot(d.rural, xlim=c(0,3000), main="", lty="solid", lwd=2, xlab="Household Expenditures (in U.S. dollars)")
lines(d.urban, lty="dashed", lwd=2)
plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")
?legend
legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2))
legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")
plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")
text(x= 500, y= 0.002, "Urban Households")
text(x= 550, y= 0.002, "Urban Households")
plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")text(x= 550, y= 0.002, "Urban Households")
plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")text(x= 600, y= 0.002, "Urban Households")
plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")text(x= 680, y= 0.002, "Urban Households")
?text
plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")text(x= 500, y= 0.002, pos=4, "Urban Households")
head(households)
head(household)
tapply(X= household$Dollars, INDEX= household$Area, FUN=mean)
tapply(X= household$Dollars, INDEX= household$Area, FUN=sd)
tapply(X= household$Dollars, INDEX= household$Area, FUN=winvar)
sqrt(tapply(X= household$Dollars, INDEX= household$Area, FUN=winvar))
tapply(X= household$Dollars, INDEX= household$Area, FUN=mean, tr=.2)
tapply(X= household$Dollars, INDEX= household$Region, FUN=mean)
c(household$Area, household$Region)
tapply(X= household$Dollars, INDEX= list(household$Region, household$Area), FUN=mean)
devSVG("/Users/zief0002/Desktop/urbanVrural.svg")plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")text(x= 500, y= 0.002, pos=4, "Urban Households")dev.off()
library(RSvgDevice)
devSVG("/Users/zief0002/Desktop/urbanVrural.svg")plot(d.rural, xlim=c(0,3000), 	main="", 	lty="solid", 	lwd=2, 	xlab="Household Expenditures (in U.S. dollars)",	bty = "l")#polygon(d.rural, col="red")lines(d.urban, lty="dashed", lwd=2)#polygon(d.urban, col="blue")legend(x = 2000, y = 0.006,	legend = c("Urban Household", "Rural Households"),	lty = c("dashed", "solid"),	col = c("black", "black"),	lwd = c(2, 2),	bty = "n")text(x= 500, y= 0.002, pos=4, "Urban Households")dev.off()
big.eight <- read.csv("/Users/zief0002/Documents/Data/Big-Nine-No-Iowa.csv", header=T)
save(big.eight, "/Users/zief0002/Desktop/Big-Eight.Rda")
?save
save(big.eight, file="/Users/zief0002/Desktop/Big-Eight.Rda")
big.nine <- read.csv("/Users/zief0002/Documents/Data/Big-Nine.csv", header=T)
source("/Users/zief0002/Documents/Research/Ross-Ordering-Project/R-Package-Ross-Ordering/Table1-11-12-2009.R")source("/Users/zief0002/Documents/Research/Ross-Ordering-Project/R-Package-Ross-Ordering/Table2-11-12-2009.R")source("/Users/zief0002/Documents/Research/Ross-Ordering-Project/R-Package-Ross-Ordering/balance.pairs-03-16-2010.R")source("/Users/zief0002/Documents/Research/Ross-Ordering-Project/R-Package-Ross-Ordering/ross.ordering-01-03-2011.R")source("/Users/zief0002/Documents/Research/Ross-Ordering-Project/R-Package-Ross-Ordering/matrix-sampling.R")source("/Users/zief0002/Documents/Research/Ross-Ordering-Project/R-Package-Ross-Ordering/factoring.R")source("/Users/zief0002/Documents/Research/Ross-Ordering-Project/R-Package-Ross-Ordering/forms-12-22-10.R")
matrix.sampling(big.nine)
ross.ordering(big.nine, paper=TRUE)
matrix.sampling(big.nine, paper=TRUE)
zagat <- read.csv("/Users/zief0002/Documents/Data/MplsZagat.csv", header = TRUE)
model.zagat <- lm(Rating ~ Cost, data = zagat)
plot(x= zagat$Cost, y=fitted(model.zagat))
par(mfrow=c(1,2))
plot(x= zagat$Cost, y=resid(model.zagat))
plot(x= fitted(model.zagat), y=resid(model.zagat))
par(mfrow=c(1,1))
plot(x= zagat$Cost, y=resid(model.zagat))
abline(h=0)
plot(x= zagat$Cost, y=rstandard(model.zagat))
abline(h=0)
identify(x= zagat$Cost, y=rstandard(model.zagat))
head(zagat)
zagat[c(3, 10, 43, 57, 61), ]
?identify
identify(x= zagat$Cost, y=rstandard(model.zagat), zagat$Name)
text(x= zagat$Cost, y=rstandard(model.zagat), zagat$Name)
vote <- read.csv("/Users/zief0002/Documents/Data/FLVote.csv", header = TRUE)
head(vote)
plot(density(vote$Buchanan))
plot(density(vote$RegRef))
plot(Buchanan ~ RegRef, data=vote)
model <- lm(Buchanan ~ RegRef, data=vote)
plot(x=vote$RegRef, y=rstandard(model))
abline(h=0)
identify(x=vote$RegRef, y=rstandard(model))
vote[50, ]
model2 <- lm(Buchanan ~ RegRef, data=vote, subset=-c(50))
?plot
plot(x=vote$RegRef, y=rstandard(model), subset=-c(50))
plot(model2)
plot(density(rstandard(model2)))
library(sm)
sm.density(rstandard(model2), model="norm")
plot(x=vote$RegRef, y=vote$Buchanan)
abline(model2)
abline(model, lty="dotted")
identify(x=vote$RegRef, y=vote$Buchanan, vote$County)
plot(x = vote$RegRef, y = vote$Buchanan,   xlab = "Registered Reform Party Members",   ylab = "Number of Buchanan Votes")identify(x = vote$RegRef, y = vote$Buchanan, labels = vote$County)abline(model.fl)abline(new.model, lty = 2)legend("topleft",   legend = c("All Florida Counties","Without Palm Beach"),   lty=c(1,2))###################################################### Create New Data Frames and Get Prediction Intervals ###################################################all.but.palm.beach <- vote[-c(50), ]palm.beach <- vote[50, ]ordered.vote <- vote[order(vote$RegRef), ]pp <- predict(new.model, interval = "prediction", newdata = ordered.vote)
plot(Buchanan ~ RegRef, data = vote, 	type = "n", 	ylim = range(vote$Buchanan, pp, na.rm = T), #Set limits using the range of the prediction interval	xlab = "Registered Reform Party Members", 	ylab = "Number of Buchanan Votes")points(x = all.but.palm.beach$RegRef, y = all.but.palm.beach$Buchanan, 	pch = 19, 	col = rgb(red = 100, green = 100, blue = 100, alpha = 100, max = 255))points(x = palm.beach$RegRef, y = palm.beach$Buchanan, 	pch = 0x2a, #Set plotting character to a unicode character	cex = 2 # Expand the character by 2 times bigger	)	matlines(x = ordered.vote$RegRef, y = pp,   lty = c(1,2,2),   col="black"  )identify(x = vote$RegRef, y = vote$Buchanan, labels = vote$County)
ordered.vote <- vote[order(vote$RegRef), ]pp <- predict(new.model, interval = "prediction", newdata = ordered.vote)
new.model <- update(model.fl, subset = -c(50))
###################################################plot(Buchanan ~ RegRef, data = vote, 	type = "n", 	ylim = range(vote$Buchanan, pp, na.rm = T), #Set limits using the range of the prediction interval	xlab = "Registered Reform Party Members", 	ylab = "Number of Buchanan Votes")points(x = all.but.palm.beach$RegRef, y = all.but.palm.beach$Buchanan, 	pch = 19, 	col = rgb(red = 100, green = 100, blue = 100, alpha = 100, max = 255))points(x = palm.beach$RegRef, y = palm.beach$Buchanan, 	pch = 0x2a, #Set plotting character to a unicode character	cex = 2 # Expand the character by 2 times bigger	)	matlines(x = ordered.vote$RegRef, y = pp,   lty = c(1,2,2),   col="black"  )identify(x = vote$RegRef, y = vote$Buchanan, labels = vote$County)
library(RSvgDevice)
library(RSvgDevice)devSVG("/Users/zief0002/Desktop/Buchanan.svg")plot(Buchanan ~ RegRef, data = vote, 	type = "n", 	ylim = range(vote$Buchanan, pp, na.rm = T), #Set limits using the range of the prediction interval	xlab = "Registered Reform Party Members", 	ylab = "Number of Buchanan Votes")points(x = all.but.palm.beach$RegRef, y = all.but.palm.beach$Buchanan, 	pch = 19, 	col = rgb(red = 100, green = 100, blue = 100, alpha = 100, max = 255))points(x = palm.beach$RegRef, y = palm.beach$Buchanan, 	pch = 0x2a, #Set plotting character to a unicode character	cex = 2 # Expand the character by 2 times bigger	)	#matlines(x = ordered.vote$RegRef, y = pp, #  lty = c(1,2,2), #  col="black"#  )text(x = vote$RegRef, y = vote$Buchanan, labels = vote$County)dev.off()
devSVG("/Users/zief0002/Desktop/Buchanan.svg")
plot(Buchanan ~ RegRef, data = vote, 	type = "n", 	ylim = range(vote$Buchanan, pp, na.rm = T), #Set limits using the range of the prediction interval	xlab = "Registered Reform Party Members", 	ylab = "Number of Buchanan Votes")
text(x = vote$RegRef, y = vote$Buchanan, labels = vote$County)
points(x = vote$RegRef, y = vote$Buchanan, 	pch = 19, 	col = rgb(red = 100, green = 100, blue = 100, alpha = 100, max = 255))
dev.off()
